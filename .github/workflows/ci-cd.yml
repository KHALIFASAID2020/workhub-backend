name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  # 1) Build + tests + couverture + analyse Sonar (via Maven)
  build-test-sonar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # Génère le rapport JaCoCo (target/site/jacoco/jacoco.xml)
      - name: Build & test (JaCoCo)
        run: mvn -B -Psonar verify

      # Analyse SonarCloud en lisant les props du pom.xml
      - name: SonarCloud (Maven)
        run: mvn -B -Psonar sonar:sonar -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  # 2) Build & push image Docker vers GHCR (seulement sur main)
  docker-push:
    needs: build-test-sonar
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compute image tag (short SHA)
        id: meta
        run: echo "TAG=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/workhub-backend:${{ steps.meta.outputs.TAG }}
            ghcr.io/${{ github.repository_owner }}/workhub-backend:latest

  # 3) Déploiement sur la VM (exécuté seulement si les 3 secrets VPS existent)
  deploy:
    needs: docker-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.VPS_HOST != '' && secrets.VPS_USER != '' && secrets.SSH_PRIVATE_KEY != ''
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            TAG=$(echo $GITHUB_SHA | cut -c1-8)
            sudo /opt/workhub/deploy.sh "$TAG"
